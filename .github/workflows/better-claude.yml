name: Better Claude Go Tool CI/CD

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'better-claude-go/**'
      - '.github/workflows/better-claude.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'better-claude-go/**'
      - '.github/workflows/better-claude.yml'

env:
  GO_VERSION: '1.24.4'
  BINARY_NAME: 'better-claude'

jobs:
  test:
    name: Test Go Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('better-claude-go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      working-directory: ./better-claude-go
      run: go mod download
      
    - name: Verify dependencies
      working-directory: ./better-claude-go
      run: go mod verify
      
    - name: Run tests
      working-directory: ./better-claude-go
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Run go vet
      working-directory: ./better-claude-go
      run: go vet ./...
      
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.1
      with:
        working-directory: ./better-claude-go
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./better-claude-go/coverage.out
        flags: unittests
        name: codecov-umbrella
        
  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly needed
          - os: windows
            arch: arm64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('better-claude-go/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      working-directory: ./better-claude-go
      run: go mod download
      
    - name: Build binary
      working-directory: ./better-claude-go
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        if [ "${{ matrix.os }}" = "windows" ]; then
          go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}.exe main.go
        else
          go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }} main.go
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          better-claude-go/${{ env.BINARY_NAME }}-*
        retention-days: 7
        
  integration-test:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    needs: build
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        profile: [dev, prod, personal]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}-amd64
        path: ./artifacts
        
    - name: Make binary executable
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          chmod +x ./artifacts/${{ env.BINARY_NAME }}-linux-amd64
          mv ./artifacts/${{ env.BINARY_NAME }}-linux-amd64 ./artifacts/${{ env.BINARY_NAME }}
        else
          chmod +x ./artifacts/${{ env.BINARY_NAME }}-darwin-amd64
          mv ./artifacts/${{ env.BINARY_NAME }}-darwin-amd64 ./artifacts/${{ env.BINARY_NAME }}
        fi
        
    - name: Test help command
      run: ./artifacts/${{ env.BINARY_NAME }} --help
      
    - name: Test profile configuration (dry-run)
      run: ./artifacts/${{ env.BINARY_NAME }} configure --profile ${{ matrix.profile }} --dry-run
      
    - name: Test backup command (dry-run)
      run: ./artifacts/${{ env.BINARY_NAME }} backup --profile ${{ matrix.profile }} --dry-run || true
      
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./better-claude-go/...'
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts
        
    - name: Create release directory
      run: mkdir -p ./release
      
    - name: Prepare release files
      run: |
        for dir in ./release-artifacts/*/; do
          cp -r "$dir"* ./release/
        done
        ls -la ./release/
        
    - name: Generate release notes
      id: release_notes
      run: |
        echo "## Better Claude Go Tool Release" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Features" >> release_notes.md
        echo "- Railway-oriented programming with Result types" >> release_notes.md
        echo "- Functional composition patterns with samber/lo" >> release_notes.md
        echo "- Profile-based configuration (dev/prod/personal)" >> release_notes.md
        echo "- OpenTelemetry instrumentation for observability" >> release_notes.md
        echo "- Automatic backups and configuration validation" >> release_notes.md
        echo "- Integration with justfile workflow" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Profiles Available" >> release_notes.md
        echo "- **dev/development**: High performance settings for development" >> release_notes.md
        echo "- **prod/production**: Conservative settings for production" >> release_notes.md
        echo "- **personal/default**: Balanced settings for personal use" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Platform Support" >> release_notes.md
        echo "- Linux (amd64, arm64)" >> release_notes.md
        echo "- macOS (amd64, arm64)" >> release_notes.md
        echo "- Windows (amd64)" >> release_notes.md
        echo "" >> release_notes.md
        echo "Generated with ðŸ¤– Claude Code" >> release_notes.md
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Better Claude v${{ github.run_number }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      run: |
        for file in ./release/*; do
          if [ -f "$file" ]; then
            asset_name=$(basename "$file")
            echo "Uploading $asset_name"
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$file" \
                 "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
          fi
        done